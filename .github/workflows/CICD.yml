name: Example GitHub Pipeline (Self-Hosted)
 
on:
  workflow_dispatch:
 
env:
 
  FLYWAY_LICENSE_KEY: ${{ secrets.FLYWAY_LICENSE_KEY }} #Repository Secret - Create this within the Projects Settings > Secrects > Actions section
  ACTIONS_RUNNER_DEBUG: true 
 
jobs:
  
  test:
    name: Deploy Test
    runs-on: self-hosted
    environment: 'test' 
    if: ${{ true }} #Set this variable to false to temporarily disable the job
    env:
      stage: 'test'
      databaseName: ${{ secrets.databaseName}}
      JDBC: ${{ secrets.JDBC }}
 
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      # Runs the Flyway Migrate against the test database
      - name: Migrate test DB
        if: ${{ true }}
        run: |
          flyway migrate -configFiles="C:\flyway\FirstTask\flyway.toml,C:\flyway\FirstTask\flyway.user.toml" -workingDirectory="C:\flyway\FirstTask" -environment=target2


  prod:
    needs: test
    name: Deploy Production
    runs-on: self-hosted
    environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    if: ${{ true }} #Set this variable to false to temporarily disable the job
    env:
      stage: 'Prod'
      databaseName: ${{ secrets.databaseName}}
      JDBC: ${{ secrets.JDBC }}
      #userName: ${{ secrets.userName }}
      #password: ${{ secrets.password }}
      pauseForCodeReview: true
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      # Runs the Flyway Migrate against the Production database
      - name: Migrate Build DB
        if: ${{ true }}
        run: |
          flyway migrate -configFiles="C:\flyway\FirstTask\flyway.toml,C:\flyway\FirstTask\flyway.user.toml" -workingDirectory="C:\flyway\FirstTask" -environment=Prod
          
      #- name: commit and push migration files
      #  run: |  
      #    git config --global user.name 'sandeep pachipala'
      #    git config --global user.email 'sandeep.pachipala@gmail.com'
      #    git commit -am "Automated report"
      #    git push
